
# Guía de Contribución

Este documento describe cómo colaboramos en el equipo, seguimos buenas prácticas de control de versiones y simulamos un entorno profesional con Jira y GitHub.

---
## 📊 Dashboard en Jira

Puedes acceder al tablero de seguimiento y control de cambios del proyecto en el siguiente enlace:

🔗 Dashboard de Jira - Gestión de Cambios(https://cristian-jurado.atlassian.net/jira/software/projects/GDEA/list)

Este panel contiene:
- Peticiones de cambio
- Asignación de tareas
- Flujo de estados
- Evidencia del proceso colaborativo

---
## 🧩 Estructura del Trabajo Colaborativo

- Cada integrante trabaja en una **rama independiente**.
- Utilizamos **Gitflow** para organizar el flujo de trabajo: `main`, `develop`, `feature/*`, `hotfix/*`.
- Se deben hacer **commits claros y frecuentes**.
- Todo cambio debe pasar por un **pull request** con revisión de al menos otro miembro.
- Se asignan tareas y cambios vía **issues en GitHub** y **tickets en Jira**.


## 👨‍💻 Flujo de Trabajo

Utilizamos el modelo **Gitflow**, con las siguientes ramas:

- `main`: Versión estable de la aplicación.
- `develop`: Integración continua de funcionalidades.
- `feature/nombre-funcion`: Funcionalidades nuevas.
- `bugfix/nombre-error`: Corrección de errores.
- `hotfix/urgente`: Cambios urgentes a producción.
- `release/V1.0.0`: Lanzamiento de versiones.

---
## 🛠️ Proceso de Control de Cambios

1. Crear un issue en GitHub o ticket en Jira para documentar el cambio.
2. Asignar el issue a un desarrollador y crear una rama `feature/nombre`.
3. Hacer los cambios localmente y realizar commits.
4. Subir la rama al repositorio remoto y hacer un pull request.
5. Revisar el código en equipo y aprobar la fusión.
6. El comité de control de cambios verifica y aprueba cambios mayores.

## 🧠 Herramientas Utilizadas

- **Git** y **GitHub**: control de versiones, issues y pull requests.
- **Jira Service Management**: control de cambios, asignación de tareas, flujo de estados.

Cada cambio debe iniciar en **Jira**, vincularse a un **issue en GitHub**, y finalizar en un **pull request** aprobado.

---

## ✍️ Convención de Commits

Formato recomendado:
```
[Tipo]: Descripción clara del cambio
```

Ejemplos:
- `[Feature]: Registro de nuevos participantes`
- `[Fix]: Corregido error en la carga del comprobante`
- `[Docs]: Actualizado README con capturas`

Tipos comunes:
- `Feature`
- `Fix`
---

## 🔎 Revisión de Código

- Cada Pull Request debe ser revisado por al menos 1 integrante.
- Revisar nombres de funciones, limpieza del código, modularidad.
- Añadir comentarios si se requieren ajustes o explicaciones.

---

## 🧪 Pruebas

- Todo módulo se verifica que no se rompa funcionalidad existente antes de fusionar.
---

## 🧑‍⚖️ Comité de Control de Cambios

- El equipo cuenta con 2 miembros encargados de **revisar y aprobar** cambios importantes o estructurales.
- Ellos validan decisiones antes de fusionar a `main`.

---
